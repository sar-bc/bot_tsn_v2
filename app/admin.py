import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ContentType, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import types
import app.keyboards as kb
import logging
from app.states import ImportUsers, ImportIpu, ImportPokazaniya, ChoiceHomeUser, ExportIpu
from database.Database import DataBase
import csv
from pathlib import Path

type_mapping = {
    'hv': '–•–í–°',
    'gv': '–ì–í–°',
    'e': '–≠–õ-–í–û'
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)

admin = Router()


@admin.message(F.text.lower() == 'admin')
async def admin_command(message: Message, state: FSMContext):
    await state.clear()
    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = message.from_user.id
    db = DataBase()
    admin_tg = await db.check_admin(telegram_id)
    user_state = await db.get_state(message.from_user.id)
    await db.delete_messages(user_state)
    if admin_tg.id_tg == telegram_id:
        sent_mess = await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é!", reply_markup=await kb.inline_menu_admin())
        user_state.last_message_ids.append(sent_mess.message_id)
        await db.update_state(user_state)
    else:
        return


# ====================================================================
# –ò–º–ø–æ—Ä—Ç User
@admin.callback_query(F.data.startswith('import_users'))
async def import_users(callback: CallbackQuery, state: FSMContext):
    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    await callback.message.answer(f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª User —Ñ–æ—Ä–º–∞—Ç–∞ csv\n"
                                  f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  f"ls;home;kv;address;flag\n"
                                  f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ utf-8")
    await state.set_state(ImportUsers.input_file)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
@admin.message(ImportUsers.input_file)
async def process_import_users(message: Message, state: FSMContext):
    from main import bot
    document = message.document
    file_id = document.file_id

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(file_id)
    file_name = document.file_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_path = os.path.join("uploaded_files", file_name)  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("uploaded_files", exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await bot.download_file(file.file_path, file_path)
    logger.info(f"file:{file_path}")
    if check_file_extension(file_name, "{'.csv'}"):
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        if await add_user_from_csv(file_path):
            await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            delete_file(file_path)
            await admin_command(message, state)
    else:
        logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞. –ù–µ CSV!")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...")
        await message.answer(f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª User —Ñ–æ—Ä–º–∞—Ç–∞ csv\n"
                             f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                             f"ls;home;kv;address;flag\n"
                             f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ utf-8")
        delete_file(file_path)


# ====================================================================
# –ò–º–ø–æ—Ä—Ç –ò–ü–£

@admin.callback_query(F.data.startswith('import_ipu'))
async def import_ipu(callback: CallbackQuery, state: FSMContext):
    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    await callback.message.answer(f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –ò–ü–£ —Ñ–æ—Ä–º–∞—Ç–∞ csv\n"
                                  f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  f"ls;name;number;data_pov_next;location;type\n"
                                  f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ utf-8")
    await state.set_state(ImportIpu.input_file)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
@admin.message(ImportIpu.input_file)
async def process_import_ipu(message: Message, state: FSMContext):
    from main import bot
    document = message.document
    file_id = document.file_id

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(file_id)
    file_name = document.file_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_path = os.path.join("uploaded_files", file_name)  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("uploaded_files", exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await bot.download_file(file.file_path, file_path)
    logger.info(f"file:{file_path}")
    if check_file_extension(file_name, "{'.csv'}"):
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        if await add_ipu_from_csv(file_path):
            await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            delete_file(file_path)
            await admin_command(message, state)
    else:
        logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞. –ù–µ CSV!")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...")
        await message.answer(f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –ò–ü–£ —Ñ–æ—Ä–º–∞—Ç–∞ csv\n"
                             f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                             f"ls;name;number;data_pov_next;location;type\n"
                             f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ utf-8")
        delete_file(file_path)


# ====================================================================
# –ò–º–ø–æ—Ä—Ç –ü–æ–∫–∞–∑–∞–Ω–∏–π

@admin.callback_query(F.data.startswith('import_pokazaniya'))
async def import_pokazaniya(callback: CallbackQuery, state: FSMContext):
    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    await callback.message.answer(f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –ü–æ–∫–∞–∑–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∞ csv\n"
                                  f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                  f"ls;kv;hv;gv;e;date\n"
                                  f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ utf-8")
    await state.set_state(ImportPokazaniya.input_file)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
@admin.message(ImportPokazaniya.input_file)
async def process_import_pokaz(message: Message, state: FSMContext):
    from main import bot
    document = message.document
    file_id = document.file_id

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(file_id)
    file_name = document.file_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    file_path = os.path.join("uploaded_files", file_name)  # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs("uploaded_files", exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    await bot.download_file(file.file_path, file_path)
    logger.info(f"file:{file_path}")
    if check_file_extension(file_name, "{'.csv'}"):
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
        if await add_pokaz_from_csv(file_path):
            await message.answer("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            delete_file(file_path)
            await admin_command(message, state)
    else:
        logger.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞. –ù–µ CSV!")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑...")
        await message.answer(f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –ü–æ–∫–∞–∑–∞–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–∞ csv\n"
                             f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                             f"ls;kv;hv;gv;e;date\n"
                             f"–ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ utf-8")
        delete_file(file_path)


# ====================================================================
# –≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤
@admin.callback_query(F.data.startswith('export_users'))
async def export_users(callback: CallbackQuery, state: FSMContext):
    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    sent_mess = await callback.message.answer("üèò –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–º...",
                                              reply_markup=await kb.reply_choice_home())
    user_state.last_message_ids.append(sent_mess.message_id)
    await db.update_state(user_state)
    await state.set_state(ChoiceHomeUser.input_home)


@admin.message(ChoiceHomeUser.input_home)
async def process_export_user_home(message: Message, state: FSMContext):
    db = DataBase()
    user_state = await db.get_state(message.from_user.id)
    await db.delete_messages(user_state)
    await state.clear()
    await message.answer(f"–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–º—É ‚Ññ{message.text}. –û–∂–∏–¥–∞–π—Ç–µ ...")

    file_path = f'uploaded_files/export_users_{message.text}.csv'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await export_users_to_csv(file_path, message.text)  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV

    await send_file_to_user(message, file_path)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(file_path)
    await admin_command(message, state)


# ====================================================================
# –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–∏–±–æ—Ä–æ–≤ —É—á–µ—Ç–∞

@admin.callback_query(F.data.startswith('export_ipu'))
async def export_ipu(callback: CallbackQuery, state: FSMContext):
    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    await callback.message.answer(f"–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ. –û–∂–∏–¥–∞–π—Ç–µ ...")
    await state.set_state(ExportIpu.export)
    print(f"state={await state.get_state()}")


@admin.message(ExportIpu.export)
async def process_export_ipu(message: Message, state: FSMContext):
    print(f"–ó–∞—à–ª–∏")
    print(f"state={await state.get_state()}")
    file_path = f'uploaded_files/export_ipu.csv'  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await export_ipu_to_csv(file_path)  # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ CSV

    await send_file_to_user(message, file_path)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    os.remove(file_path)
    await admin_command(message, state)


# =============FUNCTIN==================

async def export_users_to_csv(file_path, home):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV-—Ñ–∞–π–ª."""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    try:
        with open(file_path, 'w', newline='', encoding='utf-8') as csv_file:
            writer = csv.writer(csv_file, delimiter=';')
            writer.writerow(['ls', 'home', 'kv', 'address'])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            db = DataBase()
            users = await db.get_users_home(home)

            if not users:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –¥–æ–º–∞ {home}.")
                return

            for user in users:
                logger.info(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.ls}, {user.home}, {user.kv}, {user.address}")
                writer.writerow([user.ls, user.home, user.kv, user.address])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV: {e}")


# ========================================================================
async def export_ipu_to_csv(file_path):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ò–ü–£ –≤ CSV-—Ñ–∞–π–ª."""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    try:
        with open(file_path, 'w', newline='', encoding='utf-8') as csv_file:
            writer = csv.writer(csv_file, delimiter=';')
            writer.writerow(['ls', 'name', 'number', 'data_pov_next', 'location', 'type'])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            db = DataBase()
            ipus = await db.get_ipu_all()

            if not ipus:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–±–æ—Ä—ã —É—á–µ—Ç–∞.")
                return

            for ipu in ipus:
                logger.info(f"–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª –ø—É: {ipu.ls}, {ipu.name}, {ipu.number}, {ipu.data_pov_next},"
                            f"{ipu.location}, {ipu.type}")
                writer.writerow([ipu.ls, ipu.name, ipu.number, ipu.data_pov_next, ipu.location, ipu.type])  #
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª: {file_path}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV: {e}")


# ========================================================================
async def send_file_to_user(message: Message, file_path: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º InputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
        input_file = FSInputFile(file_path)  # –°–æ–∑–¥–∞–µ–º InputFile —Å –ø—É—Ç–µ–º –∫ —Ñ–∞–π–ª—É
        await message.answer_document(input_file)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    except FileNotFoundError:
        await message.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")


# ========================================================================

async def add_user_from_csv(file_path):
    with open(file_path, 'r', encoding='utf-8') as csv_file:
        rows = csv.reader(csv_file, delimiter=';')
        headers = next(rows)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers_full = ['ls', 'home', 'kv', 'address', 'flag']
        headers_partial = ['ls', 'home', 'kv', 'address']

        if headers != headers_full and headers != headers_partial:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞")
            return False

        db = DataBase()
        for row in rows:
            ls, home, kv, address = row[:4]  # –±–µ—Ä–µ–º 4 —ç–ª–µ–º–µ–Ω—Ç–∞
            flag_value = row[4].strip().lower() == '1' if len(row) > 4 else False  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞

            if flag_value:
                await db.del_user(ls)
            else:
                await db.add_or_update_user(ls, home, kv, address)

    return True


# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

async def add_ipu_from_csv(file_path):
    with open(file_path, 'r', encoding='utf-8') as csv_file:
        rows = csv.reader(csv_file, delimiter=';')
        headers = next(rows)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers_full = ['ls', 'name', 'number', 'data_pov_next', 'location', 'type', 'flag']
        headers_partial = ['ls', 'name', 'number', 'data_pov_next', 'location', 'type']

        if headers != headers_full and headers != headers_partial:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞")
            return False

        db = DataBase()
        for row in rows:
            ls, name, number, data_pov_next, location, type_ = row[:6]
            flag_value = row[6].strip().lower() == '1' if len(row) > 6 else False  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞

            if flag_value:
                await db.del_ipu(ls, type_)
            else:
                await db.add_or_update_ipu(ls, name, number, data_pov_next, location, type_)

    return True


# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
async def add_pokaz_from_csv(file_path):
    with open(file_path, 'r', encoding='utf-8') as csv_file:
        rows = csv.reader(csv_file, delimiter=';')
        headers = next(rows)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers_full = ['ls', 'kv', 'hv', 'gv', 'e', 'date', 'flag']
        headers_partial = ['ls', 'kv', 'hv', 'gv', 'e', 'date']

        if headers != headers_full and headers != headers_partial:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–∞")
            return False

        db = DataBase()
        for row in rows:
            ls, kv, hv, gv, e, date = row[:6]
            flag_value = row[6].strip().lower() == '1' if len(row) > 6 else False  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞

            if flag_value:
                await db.pokaz_admin_del(ls, date)
            else:
                await db.add_or_update_pokaz_admin(ls, kv, hv, gv, e, date)

    return True


# $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
def check_file_extension(file_name, valid_extensions):
    extension = Path(file_name).suffix  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    return extension.lower() in valid_extensions  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º


# =====================
def delete_file(file_path):
    if os.path.exists(file_path):
        os.remove(file_path)
        logger.info("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        logger.info("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è! –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
# =====================
# =====================
# =====================
