from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton,
                           InlineKeyboardMarkup, InlineKeyboardButton)
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from datetime import date
from database.Database import DataBase


async def inline_ls(ls):
    keyboard = InlineKeyboardBuilder()
    if ls:
        for l in ls:
            keyboard.add(InlineKeyboardButton(text=f'üè† {str(l.ls)}-{str(l.kv)}', callback_data=f'show_ls:{str(l.ls)}'))
    keyboard.add(InlineKeyboardButton(text=f'üîç –î–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç', callback_data='add_ls'))
    return keyboard.adjust(1).as_markup()




# async def inline_show_ipu(ls: int, ipu):
#     keyword = InlineKeyboardBuilder()
#     type_mapping = {
#         'hv': '–•–í–°',
#         'gv': '–ì–í–°',
#         'e': '–≠–õ-–í–û'
#     }
    
#     if ipu:
#         current_date = date.today()
#         db = DataBase()
#         last = await db.get_pokazaniya_last_ls(ls)

#         for i in ipu:
#             print(f"i={i}")
#             display_type = type_mapping.get(i.type, i.type)
#             display_new = " "
            
#             if last is not None and last.date == current_date:
#                 if i.type == 'hv' and last.hv is not None:
#                     display_new = ' üÜï'
#                 elif i.type == 'gv' and last.gv is not None:
#                     display_new = ' üÜï'
#                 elif i.type == 'e' and last.e is not None:
#                     display_new = ' üÜï'

#             number_display = f", {i.number}" if len(i.number) > 4 else ' '
#             location_display = i.location if i.location is not None else ' '

#             keyword.row(InlineKeyboardButton(
#                 text=f"{display_type}{display_new}{number_display} {location_display}",
#                 callback_data=f'add_pokazaniya:{i.ls}:{i.type}'
#             ))

#     keyword.row(
#         InlineKeyboardButton(text='‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ', callback_data='all_ls_call'),
#         InlineKeyboardButton(text='‚ùå –û—Ç–≤—è–∑–∞—Ç—å —Å—á–µ—Ç', callback_data=f'del_ls:{ls}')
#     )
    
#     return keyword.as_markup()

async def inline_show_ipu(ls: int, ipu):
    keyword = InlineKeyboardBuilder()
    type_mapping = {
        'hv': '–•–í–°',
        'gv': '–ì–í–°',
        'e': '–≠–õ-–í–û'
    }

    if ipu:
        current_date = date.today()
        db = DataBase()
        last = await db.get_pokazaniya_last_ls(ls)

        for i in ipu:
            print(f"i={i}")
            display_type = type_mapping.get(i.type, i.type)
            display_new = " "
            date_message = ""

            if last is not None and last.date == current_date:
                if i.type == 'hv' and last.hv is not None:
                    display_new = ' üÜï'
                elif i.type == 'gv' and last.gv is not None:
                    display_new = ' üÜï'
                elif i.type == 'e' and last.e is not None:
                    display_new = ' üÜï'

            if i.data_pov_next is not None:
                if i.data_pov_next > current_date:
                    date_message = f" (–î–∞—Ç–∞ –ø–æ–≤–µ—Ä–∫–∏:{i.data_pov_next.strftime('%d.%m.%y')})"
                else:
                    date_message = " (–°—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω)"
                    continue

            number_display = f", {i.number}" if len(i.number) > 4 else ' '
            location_display = i.location if i.location is not None else ' '

            keyword.row(InlineKeyboardButton(
                text=f"{display_type}{display_new}{number_display} {location_display} {date_message}",
                callback_data=f'add_pokazaniya:{i.ls}:{i.type}'
            ))

    keyword.row(
        InlineKeyboardButton(text='‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª–æ', callback_data='all_ls_call'),
        InlineKeyboardButton(text='‚ùå –û—Ç–≤—è–∑–∞—Ç—å —Å—á–µ—Ç', callback_data=f'del_ls:{ls}')
    )

    return keyword.as_markup()


async def inline_del_ls(ls: int):
    keyword = InlineKeyboardBuilder()
    keyword.row(InlineKeyboardButton(text=f'–î–∞', callback_data=f'del_ls_yes:{ls}'),
                InlineKeyboardButton(text=f'–ù–µ—Ç', callback_data=f'all_ls_call'))
    return keyword.as_markup()


async def inline_back(ls: int):
    keyword = InlineKeyboardBuilder()
    keyword.row(InlineKeyboardButton(text=f'‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å—á–µ—Ç—á–∏–∫–æ–≤', callback_data=f'show_ls:{ls}'))
    return keyword.as_markup()


# Admin keyboars

async def inline_menu_admin():
    keyword = InlineKeyboardBuilder()
    keyword.row(
        InlineKeyboardButton(text=f"–ò–º–ø–æ—Ä—Ç –ª.—Å—á. üóÇ", callback_data='import_users'),
        InlineKeyboardButton(text=f"–≠–∫—Å–ø–æ—Ä—Ç –ª.—Å—á. ‚ôªÔ∏è", callback_data='export_users')
    )
    # keyword.row(InlineKeyboardButton(text=f"–≠–∫—Å–ø–æ—Ä—Ç –ª–∏—Ü–µ–≤—ã—Ö —Å—á–µ—Ç–æ–≤ ‚ôªÔ∏è", callback_data='export_users'))
    keyword.row(
        InlineKeyboardButton(text=f"–ò–º–ø–æ—Ä—Ç –ò–ü–£  üóÉ", callback_data='import_ipu'),
        InlineKeyboardButton(text=f"–≠–∫—Å–ø–æ—Ä—Ç –ò–ü–£  üóÉ", callback_data='export_ipu')
    )

    keyword.row(InlineKeyboardButton(text=f"–ò–º–ø–æ—Ä—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π üìÉ", callback_data='import_pokazaniya'),
                InlineKeyboardButton(text=f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π üìò", callback_data='export_pokazaniya'))
    # keyword.row(InlineKeyboardButton(text=f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–∫–∞–∑–∞–Ω–∏–π üìò", callback_data='export_pokazaniya'))
    keyword.row(InlineKeyboardButton(text=f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º ‚úçÔ∏è", callback_data='send_message'))
    return keyword.as_markup()


homes = ['7', '9', '11']


async def reply_choice_home():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = ReplyKeyboardBuilder()

    for home in homes:
        keyboard.add(KeyboardButton(text=home))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º

    return keyboard.adjust(3).as_markup(resize_keyboard=True)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
async def month_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞."""
    months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å",
              "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç",
              "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
              ]
    keyboard = ReplyKeyboardBuilder()

    for month in months:
        keyboard.add(KeyboardButton(text=month))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º

    return keyboard.adjust(4).as_markup(resize_keyboard=True)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
async def year_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞."""
    keyboard = ReplyKeyboardBuilder()

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    current_year = date.today().year
    for year in range(current_year - 1, current_year + 1):  # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –ª–µ—Ç
        keyboard.add(KeyboardButton(text=str(year)))

    return keyboard.adjust(2).as_markup(resize_keyboard=True)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
