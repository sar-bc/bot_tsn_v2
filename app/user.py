from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from app.middlewares import CounterMiddleware
import app.keyboards as kb
import logging
from aiogram.fsm.context import FSMContext
from app.states import AddLs, AddPokazaniya
from typing import Any, Dict
from database.Database import DataBase
from datetime import date
from app.log import Loger

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(
#     level=logging.INFO,
#     format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
# )
# logger = logging.getLogger(__name__)
logger = Loger()
logger.get_name_log(__name__)

user = Router()

user.message.middleware(CounterMiddleware())

type_mapping = {
    'hv': '–•–í–°',
    'gv': '–ì–í–°',
    'e': '–≠–õ-–í–û'
}


@user.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await logger.info(f'ID_TG:{message.from_user.id}|–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç')
    await state.clear()
    db = DataBase()
    user_state = await db.get_state(message.from_user.id)
    await db.delete_messages(user_state)
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å !')
    await all_ls(user_state, message)


@user.message(AddLs.ls)
async def process_ls(message: Message, state: FSMContext):
    if 6 <= len(message.text) <= 8:  # –¥–ª–∏–Ω–∞ –ª–∏—Ü–µ–≤–æ–≥–æ
        try:
            await state.update_data(ls=int(message.text))
            await state.set_state(AddLs.kv)
            await logger.info(f'ID_TG:{message.from_user.id}|–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∫–≤–∞—Ä—Ç–∏—Ä—ã')
            await message.answer("–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã (–Ω–µ –±–æ–ª–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤).")
        except ValueError:
            await logger.error(f'ID_TG:{message.from_user.id}|–í–≤–µ–¥–µ–Ω—ã–π –ª–∏—Ü–µ–≤–æ–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º')
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –µ—â–µ —Ä–∞–∑")
    else:
        await logger.error(f'ID_TG:{message.from_user.id}|–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ª–∏—Ü–µ–≤–æ–≥–æ')
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –µ—â–µ —Ä–∞–∑")


@user.message(AddLs.kv)
async def process_kv(message: Message, state: FSMContext):
    if 1 <= len(message.text) <= 3:
        try:
            data = await state.update_data(kv=int(message.text))
            await state.clear()
            await logger.info(f'ID_TG:{message.from_user.id}|–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É –ª–∏—Ü–µ–≤–æ–≥–æ')
            await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥—ë—Ç –ø–æ–∏—Å–∫ –∏ –ø—Ä–∏–≤—è–∑–∫–∞ –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞..")
            await check_ls(message=message, data=data)
        except ValueError:
            await logger.error(f'ID_TG:{message.from_user.id}|–í–≤–µ–¥–µ–Ω–Ω–∞—è –∫–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º')
            await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â–µ —Ä–∞–∑")
    else:
        await logger.error(f'ID_TG:{message.from_user.id}|–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã')
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –µ—â–µ —Ä–∞–∑")


#  # Callback ###
@user.callback_query(F.data == 'add_ls')
async def add_ls(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddLs.ls)
    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    await callback.answer()
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –Ω–µ –±–æ–ª–µ–µ 8 —Ü–∏—Ñ—Ä).')


@user.callback_query(F.data.startswith('show_ls:'))
async def show_ls(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await logger.info(f"ID_TG:{callback.from_user.id}|state.get_state()=>{await state.get_state()}")
    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    await callback.answer()
    ls = int(callback.data.split(':')[1])
    await logger.info(f'ID_TG:{callback.from_user.id}|callback_show_ls:{ls}')
    await callback.message.answer("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤... –æ–∂–∏–¥–∞–π—Ç–µ.")
    ipu = await db.get_ipu(ls)
    if not ipu:
        await callback.message.answer(f"‚ùå –ù–∞ –ª–∏—Ü–µ–≤–æ–º —Å—á–µ—Ç–µ ‚Ññ{ls} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏–±–æ—Ä—ã —É—á–µ—Ç–∞‚ùóÔ∏è")
    users = await db.get_address(ls)
    user_state = await db.get_state(callback.from_user.id)
    sent_mess = await callback.message.answer(f"–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ {ls}\n"
                                              f"–ê–¥—Ä–µ—Å: {users.address}\n"
                                              f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞",
                                              reply_markup=await kb.inline_show_ipu(ls, ipu))
    user_state.last_message_ids.append(sent_mess.message_id)
    await db.update_state(user_state)


@user.callback_query(F.data == 'all_ls_call')
async def all_ls_call(callback: CallbackQuery):
    db = DataBase()
    user_bot = await db.get_userbot(callback.from_user.id)
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    await logger.info(f'ID_TG:{callback.from_user.id}|all_ls_call:user_id={callback.from_user.id}')
    sent_mess = await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –õ–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π',
                                              reply_markup=await kb.inline_ls(user_bot))
    user_state.last_message_ids.append(sent_mess.message_id)
    await db.update_state(user_state)


@user.callback_query(F.data.startswith('del_ls:'))
async def del_ls(callback: CallbackQuery):
    ls = int(callback.data.split(':')[1])
    db = DataBase()
    users = await db.get_user_ls(ls)
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    await logger.info(f"ID_TG:{callback.from_user.id}|–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–≥–æ {ls}")
    sent_mess = await callback.message.answer(f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤—è–∑–∞—Ç—å –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç?\n"
                                              f"–°—á–µ—Ç ‚Ññ {ls}\n"
                                              f"–ê–¥—Ä–µ—Å: {users.address}", reply_markup=await kb.inline_del_ls(ls))
    user_state.last_message_ids.append(sent_mess.message_id)
    await db.update_state(user_state)


@user.callback_query(F.data.startswith('del_ls_yes:'))
async def del_ls(callback: CallbackQuery):
    ls = int(callback.data.split(':')[1])
    id_tg = callback.from_user.id
    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    if await db.del_ls(id_tg, ls):
        await callback.message.answer(f'–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ{ls} —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω!')
    await db.delete_messages(user_state)
    await all_ls(user_state, callback.message)


@user.callback_query(F.data.startswith('add_pokazaniya:'))
async def add_pokazaniya(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = date.today()

    db = DataBase()
    user_state = await db.get_state(callback.from_user.id)
    await db.delete_messages(user_state)
    ls = int(callback.data.split(':')[1])
    type_ipu = callback.data.split(':')[2]
    last = await db.get_pokazaniya_last(ls, type_ipu)
    await logger.info(f"ID_TG:{callback.from_user.id}|get_pokazaniya_last:{last}")
    data_display = last.date.strftime("(%d-%m-%Y)") if last is not None else ' '
    previous_value = getattr(last, type_ipu) if last is not None else ' '
    address = await db.get_address(ls)
    display_type = type_mapping.get(type_ipu, type_ipu)
    previous_display = (
        f"–ü—Ä–µ–¥—ã–¥—É—â–µ–µ: {previous_value}  {'üÜï' if last.date == current_date else ''}{data_display}\n"
        if last is not None else ''
    )
    sent_mess = await callback.message.answer(
        f"–ü—Ä–∏–±–æ—Ä —É—á–µ—Ç–∞: {display_type}\n"
        f"{previous_display}"
        f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –Ω–∏–∂–µ:",
        reply_markup=await kb.inline_back(ls)
    )

    await state.set_state(AddPokazaniya.input)
    await state.update_data(kv=address.kv)
    await state.update_data(ls=ls)
    await state.update_data(type_ipu=type_ipu)
    await state.update_data(last_input=previous_value)
    await state.update_data(last_data=last.date)
    # await state.update_data(callback=callback)
    user_state.last_message_ids.append(sent_mess.message_id)
    await db.update_state(user_state)


@user.message(AddPokazaniya.input)
async def priem_pokaz(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    current_date = date.today()
    db = DataBase()
    user_state = await db.get_state(message.from_user.id)
    await db.delete_messages(user_state)
    data = await state.get_data()
    # call = data.get('callback')
    # await state.clear()
    display_type = type_mapping.get(data.get('type_ipu'), data.get('type_ipu'))
    await db.delete_messages(user_state)
    input_cur = message.text
    await logger.info(f"ID_TG:{message.from_user.id}|data:{data}")
    await message.answer(f"–í–≤–µ–¥–µ–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–∏–µ {display_type}: {input_cur}... –æ–∂–∏–¥–∞–π—Ç–µ")
    if input_cur.isdigit() and 1 <= len(input_cur) <= 8:
        await logger.info(
            f"ID_TG:{message.from_user.id}|–ü—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ—à–ª–∏ —á–∏—Å–ª–æ –∏ –¥–ª–∏–Ω–∞. –í–≤–µ–ª–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è {display_type}:{input_cur}")

        if data.get('last_input') != ' ':
            await logger.info(f"ID_TG:{message.from_user.id}|–£ –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ, –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–ª—å—à–µ")

            if current_date == data.get('last_data'):
                await logger.info("–î–ê–¢–´ –†–ê–í–ù–´")
                # —Å–¥–µ—Å—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ
                last_pokazaniya = await db.get_pokazaniya_last_prev(
                    int(data.get('ls')), data.get('last_data').strftime('%Y-%m-%d'))
                if last_pokazaniya:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø–æ–ª—é, —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤ data.get('type_ipu')
                    type_ipu = data.get('type_ipu')  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø IPU
                    value = None

                    if type_ipu == 'hv':
                        value = last_pokazaniya.hv  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è hv
                    elif type_ipu == 'gv':
                        value = last_pokazaniya.gv  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è gv
                    elif type_ipu == 'e':
                        value = last_pokazaniya.e  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è e

                    await logger.info(f"last_pokazaniya: {type_ipu} = {value}")

                    if int(input_cur) >= int(value):
                        await logger.info(f"ID_TG:{message.from_user.id}|–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥")
                        await state.clear()
                        # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
                        await db.add_or_update_pokazaniya(data.get('ls'), data.get('kv'), data.get('type_ipu'),
                                                          input_cur)
                        sent_mess = await message.answer(f"–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ø–µ—à–Ω–æ!",
                                                         reply_markup=await kb.inline_back(
                                                             data.get('ls')))
                        user_state.last_message_ids.append(sent_mess.message_id)
                        await db.update_state(user_state)
                    else:
                        await logger.info(f"ID_TG:{message.from_user.id}|–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —á–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ")
                        await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

                else:
                    await logger.info("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
                    await db.add_or_update_pokazaniya(data.get('ls'), data.get('kv'), data.get('type_ipu'), input_cur)
                    sent_mess = await message.answer(f"–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ø–µ—à–Ω–æ!", reply_markup=await kb.inline_back(
                        data.get('ls')))
                    user_state.last_message_ids.append(sent_mess.message_id)
                    await db.update_state(user_state)

            else:
                await logger.info("–î–ê–¢–´ –ù–ï –†–ê–í–ù–´")

                if int(input_cur) >= int(data.get('last_input')):
                    await logger.info(f"ID_TG:{message.from_user.id}|–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥")
                    await state.clear()
                    # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
                    await db.add_or_update_pokazaniya(data.get('ls'), data.get('kv'), data.get('type_ipu'), input_cur)
                    sent_mess = await message.answer(f"–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ø–µ—à–Ω–æ!", reply_markup=await kb.inline_back(
                        data.get('ls')))
                    user_state.last_message_ids.append(sent_mess.message_id)
                    await db.update_state(user_state)

                else:
                    await logger.info(f"ID_TG:{message.from_user.id}|–û—à–∏–±–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —á–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ")
                    await message.answer("–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

        else:
            await logger.info(f"ID_TG:{message.from_user.id}|–ù–ï–¢ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π. –ù–µ —Å —á–µ–º —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥ ")
            await state.clear()
            # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
            await db.add_or_update_pokazaniya(data.get('ls'), data.get('kv'), data.get('type_ipu'),
                                              input_cur)
            sent_mess = await message.answer(f"–ü–æ–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã —É—Å–ø–µ—à–Ω–æ!",
                                             reply_markup=await kb.inline_back(
                                                 data.get('ls')))
            user_state.last_message_ids.append(sent_mess.message_id)
            await db.update_state(user_state)
            # —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π
    else:
        await logger.error(f"ID_TG:{message.from_user.id}|–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {display_type}!")
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")


# 1. –≤–≤–µ–¥–µ–Ω–æ–µ –∫–æ–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–∏—Å–ª–æ –∏ –Ω–∞ –¥–ª–∏–Ω—É –æ—Ç 1 –¥–æ 8
# –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Ç–æ —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ
# 2. –¥–∞–ª–µ–µ —Å–º–æ—Ç—Ä–∏–º –≤ –±–∞–∑—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø–æ–∫–∞–∑–∞–Ω–∏–µ –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ
# –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω—å—à–µ —Ç–æ —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏
# –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ
# –ï—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–≤–µ–¥–µ–Ω–∏–π –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –ø–æ–∫–∞–∑–∞–Ω–∏–∏ –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —á–∏—Å–ª–æ –∏ –¥–ª–∏–Ω—É –æ—Ç 1 –¥–æ 8 –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É

#  ####### FUNCTION ###################
async def all_ls(state, message):
    await logger.info(f'ID_TG:{message.from_user.id}|all_ls:user_id={state.user_id}')
    db = DataBase()
    user_bot = await db.get_userbot(state.user_id)
    sent_mess = await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –õ–∏—Ü–µ–≤–æ–π —Å—á—ë—Ç –∏–∑ —Å–ø–∏—Å–∫–∞, –ª–∏–±–æ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π',
                                     reply_markup=await kb.inline_ls(user_bot))
    state.last_message_ids.append(sent_mess.message_id)
    await db.update_state(state)


# ############
async def check_ls(message: Message, data: Dict[str, Any]):
    db = DataBase()
    await logger.info(f"ID_TG:{message.from_user.id}|check_ls:{data['ls']};kv:{data['kv']}")
    u = await db.get_users(data['ls'], data['kv'])
    if u:
        await logger.info(f'ID_TG:{message.from_user.id}|—Ç–∞–∫–æ–π —é–∑–µ—Ä –µ—Å—Ç—å:{u}')
        if await db.get_userbot_ls(u.ls):
            await message.answer(f"‚õî –õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!")
        else:
            # await db.create_userbot(id_tg=message.from_user.id, ls=u.ls, home=u.home, kv=u.kv)
            kwargs = {
                'id_tg': message.from_user.id,
                'ls': u.ls,
                'home': u.home,
                'kv': u.kv
            }
            if await db.create_userbot(**kwargs):
                await message.answer(f"–õ–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç ‚Ññ{u.ls} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
                user_state = await db.get_state(message.from_user.id)
                await all_ls(user_state, message)
            else:
                await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å –¢–°–ù')

    else:
        await logger.error(f'ID_TG:{message.from_user.id}|—Ç–∞–∫–æ–≥–æ —é–∑–µ—Ä–µ –ù–ï–¢')
        await message.answer('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Ü–µ–≤–æ–π —Å—á–µ—Ç! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Å –¢–°–ù')
        user_state = await db.get_state(message.from_user.id)
        await all_ls(user_state, message)
